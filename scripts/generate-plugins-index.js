// scripts/generate-plugins-index.js
import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, "..");

async function loadConfig() {
    const configPath = path.join(rootDir, "texlyre.config.ts");
    const { default: config } = await import(configPath);
    return config;
}

function fixImportPaths(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');

    const updatedContent = content.replace(
        /from ['"]\.\.\/\.\.\/\.\.\/src\/([^'"]+)['"]/g,
        "from '../../../$1'"
    );

    fs.writeFileSync(filePath, updatedContent);
}

function copyAndFixPlugins(srcDir, destDir) {
    if (!fs.existsSync(destDir)) {
        fs.mkdirSync(destDir, { recursive: true });
    }

    const items = fs.readdirSync(srcDir);

    for (const item of items) {
        const srcPath = path.join(srcDir, item);
        const destPath = path.join(destDir, item);

        if (fs.statSync(srcPath).isDirectory()) {
            copyAndFixPlugins(srcPath, destPath);
        } else {
            fs.copyFileSync(srcPath, destPath);

            if (item.endsWith('.ts') || item.endsWith('.tsx')) {
                fixImportPaths(destPath);
            }
        }
    }
}

async function generatePluginsIndex() {
    const texlyreConfig = await loadConfig();

    const imports = [];
    const exports = [];
    const pluginsByType = {};
    const allPluginTypes = Object.keys(texlyreConfig.plugins);

    const srcPluginsDir = path.join(rootDir, "src", "plugins");
    const rootExtrasDir = path.join(rootDir, "extras");

    fs.mkdirSync(srcPluginsDir, { recursive: true });

    console.log("Copying extras to src/plugins and fixing import paths...");
    copyAndFixPlugins(rootExtrasDir, srcPluginsDir);

    for (const [pluginType, pluginsList] of Object.entries(texlyreConfig.plugins)) {
        for (const pluginName of pluginsList) {
            const pluginPath = `${pluginType}/${pluginName}`;
            const pluginVarName = `${pluginName}${pluginType.charAt(0).toUpperCase() + pluginType.slice(1)}Plugin`;

            imports.push(`import ${pluginVarName} from './${pluginPath}/index';`);
            exports.push(pluginVarName);

            if (!pluginsByType[pluginType]) {
                pluginsByType[pluginType] = [];
            }
            pluginsByType[pluginType].push(pluginVarName);
        }
    }

    let content = `// This file is automatically generated. Do not edit directly.
// Generated on: ${new Date().toISOString()}

// Import all configured plugins
${imports.join("\n")}

// Export individual plugins
export {
${exports.map((name) => `  ${name}`).join(",\n")}
};

`;

    allPluginTypes.forEach(type => {
        const plugins = pluginsByType[type] || [];
        content += `// Export ${type} plugins as a group
export const ${type} = {
${plugins.map((name) => `  ${name}`).join(",\n")}
};

`;
    });

    content += `// Export the structured plugins object as default
export default {
${allPluginTypes.map(type => `  ${type}`).join(",\n")}
};
`;

    const outputPath = path.join(srcPluginsDir, "index.ts");
    fs.writeFileSync(outputPath, content);

    console.log(`Generated plugins index at ${outputPath}`);
}

generatePluginsIndex();